use serenity::{
    prelude::*,
    model::channel::Message,
    framework::standard::{
        CommandResult,
        macros::command,
    },
};
use rand::seq::SliceRandom;

#[command]
async fn uwu(ctx: &Context, msg: &Message) -> CommandResult {
    // Check if the message is a reply and if it starts with "-uwu".
    if let Some(reference) = msg.referenced_message.clone() {
        if msg.content.to_lowercase().starts_with("-uwu") {
            // Get the content of the replied message.
            let original_content = reference.content;

            // Convert the content to "uwu" language with random emoticons.
            let uwu_content = uwunize(&original_content);

            // Send the "uwu" version as a reply.
            msg.delete(&ctx.http).await?;
            msg.channel_id.say(&ctx.http, &uwu_content).await?;

            // Delete the invoking message.
        }
    }

    Ok(())
}

// Function to convert text to "uwu" language with random emoticons.
fn uwunize(text: &str) -> String {
    let emoticons = vec![
        "(‚âß‚ó°‚â¶)",
        "(‚óï‚Äø‚óï‚úø)",
        "(ÔΩ°‚ô•‚Äø‚ô•ÔΩ°)",
        "(*‚âßœâ‚â¶)",
        "(>‚Äø‚ó†)‚úå",
        "(‚ÅÑ ‚ÅÑ‚Ä¢‚ÅÑœâ‚ÅÑ‚Ä¢‚ÅÑ ‚ÅÑ)‚ÅÑ",
        "(¬¥ÔΩ°‚Ä¢ ·µï ‚Ä¢ÔΩ°`)",
        "(‚ó†‚Äø‚ó†‚úø)",
        "(ÔΩ°‚ô•‚Äø‚ô•ÔΩ°)",
        "(¬¨‚Äø¬¨)",
        "(‚óï·¥•‚óï)",
        "(„Å•ÔΩ°‚óï‚Äø‚Äø‚óïÔΩ°)„Å•",
        "(¬¥‚à©ÔΩ°‚Ä¢ ·µï ‚Ä¢ÔΩ°‚à©`)",
        "(‚ÅÑ ‚ÅÑ‚Ä¢‚ÅÑ–∑‚ÅÑ‚Ä¢‚ÅÑ ‚ÅÑ)",
        "(‚âñ·¥ó‚âñ‚úø)",
        "(‚ÅÑ ‚ÅÑ>‚ÅÑ ‚ñΩ ‚ÅÑ<‚ÅÑ ‚ÅÑ)",
        "( Àò ¬≥Àò)",
        "(¬¨‚Äø¬¨)",
        "(¬¥‚Ä¢ œâ ‚Ä¢`)",
        "(‚ú™‚Äø‚ú™)„Éé",
        "(ÔΩ°‚ô•‚Äø‚ô•ÔΩ°)",
        "(‚∫£‚ó°‚∫£)‚ô°*",
        "(*‚âß‚ñΩ‚â¶)",
        "(¬¨‚Äø¬¨)",
        "(‚óï·¥ó‚óï‚úø)",
        "( ¬¥ ‚ñΩ ` )Ôæâ",
        "‚úß‚óù(‚Å∞‚ñø‚Å∞)‚óú‚úß",
        "‚òÜ*:.ÔΩ°.o(‚âß‚ñΩ‚â¶)o.ÔΩ°.:*‚òÜ",
        "(ÔΩ°‚ô•‚Äø‚ô•ÔΩ°)‚ú®",
        "(ÔΩ°‚ô•‚Äø‚ô•ÔΩ°)üåü",
        "(‚ÅÑ ‚ÅÑ‚Ä¢‚ÅÑœâ‚ÅÑ‚Ä¢‚ÅÑ ‚ÅÑ)‚ÅÑ ‚ú®",
        "(‚óï‚Äø‚óï‚úø)‚ú®",
        "(ÔΩ°‚ô•‚Äø‚ô•ÔΩ°)üí´",
        "(Ôºæ‚ó°Ôºæ)„Å£‚ú®",
        "(‚ú™‚Äø‚ú™)„Éé‚ú®",
        "(‚ÅÑ ‚ÅÑ>‚ÅÑ ‚ñΩ ‚ÅÑ<‚ÅÑ ‚ÅÑ)‚ú®",
        "( Àò ¬≥Àò)‚ù§Ô∏è‚ú®",
        "(¬¨‚Äø¬¨)‚ú®",
        "(¬¥‚Ä¢ œâ ‚Ä¢`)‚ú®",
        "(*‚âß‚ñΩ‚â¶)‚ú®",
        "(¬¨‚Äø¬¨)üíñ‚ú®",
        "( ò‚Äø ò)‚ú®",
        "(‚âñ·¥ó‚âñ‚úø)‚ú®",
        "(‚ó†‚Äø‚ó†‚úø)‚ú®",
        "(¬¨‚Äø¬¨)üåü",
        "(*‚âßœâ‚â¶)‚ú®",
    ];

    let mut uwu_text = String::new();
    let mut chars = text.chars().peekable();

    while let Some(c) = chars.next() {
        match c {
            '.' | ',' => {
                // Randomly select an emoticon.
                let emoticon = emoticons.choose(&mut rand::thread_rng()).unwrap();
                uwu_text.push_str(emoticon);
            }
            'r' => uwu_text.push_str("w"),
            'l' => uwu_text.push_str("w"),
            'R' => uwu_text.push_str("W"),
            'L' => uwu_text.push_str("W"),
            _ => uwu_text.push(c),
        }
    }

    uwu_text
}
